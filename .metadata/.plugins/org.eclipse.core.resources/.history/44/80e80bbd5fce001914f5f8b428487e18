
import java.util.*;

public class Champ {
	
	private final  int NBMINES=5;//Nombre de mines dans notre champ
	private final  int DIM=5;	//Dimension du champ
	private final String NomParDefaut="GAME";
	 private String Name;
	private static boolean[][] tabMines;//Tableau représentatif du champs		
	Random alea=new Random();
	private static int dim;
	private static int nbmines;
	
					
		
	public static  void InitialisationChamp()
	{
		tabMines=new boolean [dim][dim];		
		for(int i=0;i<dim;i++)
		{
			for(int j=0;j<dim;j++)
				tabMines[i][j]=false;//true si la case contient une mines
			
		}
	}
	
	public Champ()
	{
		
		this.dim=DIM;
		this.nbmines=NBMINES;
		this.Name=NomParDefaut;
		InitialisationChamp();
	}

	//Setters
	public Champ(int dim,int nbmines,String N)
	{
	this();//Appel du constructeur par défaut
	this.dim=dim;
	this.nbmines=nbmines;
	this.Name = new String(N); 

	//this.Name=N;Est-t-il possible de l'implémenter comme ça?
	this.Name=new String(N);
	
	
	}
	
	public  void placeMines()//Va placer aléatoirement les mines sur le champs
	{
		for(int i=0;i<nbmines;i++)
		{
			int x=alea.nextInt(dim);
			int y=alea.nextInt(dim);
			tabMines[x][y]=true;//true si la case contient une mines
			
		}
	}
	
	public void affText()//Cette méthode va nous afficher notre champs de mines
	{
		System.out.println("Notre champs de mines est le suivant:");
		
		for(int j=0;j<DIM;j++)
		{
			for(int i=0;i<DIM;i++) {
				if(tabMines[i][j]==true)//Si présence d'une mine
					System.out.print("x  ");
				else//si pas de présence de mines 
					System.out.print("0  ");
								
			}
        System.out.println();
		}
		
		
	}
	
	
	public   String toString() {//Surcharge de toString 
		StringBuilder str = new StringBuilder();
        str.append("Le nom de notre mine est : ").append(this.Name).append("\n");
        str.append("La taille de notre mines est: ").append(this.DIM).append("\n");
        str.append("Il y a  : ").append(this.NBMINES).append(" mines dans notre champ de mines\n ");
        return str.toString();
	} 
	
	//Destructeur
	protected void finalize() throws Throwable
	{
		super.finalize();
	}
	
	
	

}
